// DBML for SGPC - Sistema de Gerenciamento de Projetos de Construção (Abrangente para RFs)

Table users {
  id integer [primary key, increment]
  full_name varchar [not null]
  email varchar [unique, not null]
  phone varchar
  password_hash varchar [not null]
  hourly_rate decimal(10,2) [note: 'Custo por hora do usuário para cálculo de mão de obra']
  is_active boolean [default: true, not null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table password_reset_tokens {
  id integer [primary key, increment]
  user_id integer [not null]
  token varchar [unique, not null]
  expires_at timestamp [not null]
  created_at timestamp [default: `now()`]
}

Table roles {
  id integer [primary key, increment]
  name varchar [unique, not null] // Ex: 'Administrador', 'Gerente de Projeto', 'Engenheiro', 'Mestre de Obras', 'Compras'
  description text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table user_roles {
  user_id integer [not null]
  role_id integer [not null]
  created_at timestamp [default: `now()`]

  indexes {
    (user_id, role_id) [pk] // Composite primary key
  }
}

Table projects {
  id integer [primary key, increment]
  name varchar [not null]
  description text
  planned_start_date date
  actual_start_date date
  planned_end_date date
  actual_end_date date
  total_budget decimal(15,2)
  client_name varchar // Simplificado para MVP. Poderia ser um client_id FK para uma tabela 'clients'
  status varchar [not null, note: 'Ex: Planejamento, Em Andamento, Concluído, Suspenso, Cancelado']
  created_by_user_id integer [not null]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table project_members {
  project_id integer [not null]
  user_id integer [not null]
  role_on_project varchar [note: 'Ex: Gerente, Engenheiro Responsável. Pode ser diferente do papel global do usuário.']
  // Se a taxa horária variar por projeto para o mesmo usuário, adicionar 'hourly_rate_on_project' aqui.
  created_at timestamp [default: `now()`]

  indexes {
    (project_id, user_id) [pk] // Composite primary key
  }
}

Table tasks {
  id integer [primary key, increment]
  project_id integer [not null]
  name varchar [not null]
  description text
  planned_start_date date
  actual_start_date date
  planned_end_date date
  actual_end_date date
  status varchar [not null, note: 'Ex: A Fazer, Em Andamento, Concluído, Em Espera, Aguardando Aprovação (Kanban)']
  priority varchar [note: 'Ex: Alta, Média, Baixa']
  assigned_to_user_id integer [note: 'Responsável pela tarefa, FK para users.id']
  parent_task_id integer [note: 'Para dependências (predecessoras), FK para tasks.id (self-referencing)']
  estimated_hours decimal(8,2) [note: 'Horas estimadas para a tarefa, para cálculo de custo de mão de obra']
  actual_hours_spent decimal(8,2) [note: 'Horas reais gastas na tarefa']
  progress_percentage integer [default: 0, note: 'Percentual concluído (0-100)']
  notes text [note: 'Comentários e observações sobre o andamento da tarefa']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table materials {
  id integer [primary key, increment]
  name varchar [not null]
  description text
  unit_of_measure varchar [not null, note: 'Ex: m², m³, un, kg, L']
  unit_price decimal(10,2) [note: 'Preço médio ou último preço']
  supplier_info text [note: 'Informações do fornecedor (cadastro básico, sem integração)']
  current_stock decimal(10,2) [default: 0]
  minimum_stock decimal(10,2) [default: 0, note: 'Para alertas de reposição']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table stock_movements {
  id integer [primary key, increment]
  material_id integer [not null]
  user_id integer [note: 'Usuário que registrou a movimentação']
  movement_type varchar [not null, note: 'Ex: Entrada, Saída, AjustePositivo, AjusteNegativo, ConsumoProjeto']
  quantity decimal(10,2) [not null]
  movement_date timestamp [default: `now()`, not null]
  related_material_request_item_id integer [note: 'Se a entrada/saída está ligada a um item de requisição']
  related_task_id integer [note: 'Se o consumo está ligado a uma tarefa específica']
  notes text
  created_at timestamp [default: `now()`]
}

Table material_requests {
  id integer [primary key, increment]
  project_id integer [not null]
  requester_user_id integer [not null, note: 'Solicitante, FK para users.id']
  approver_user_id integer [note: 'Quem aprovou/rejeitou, FK para users.id']
  request_date date [not null, default: `now()`]
  needed_by_date date [not null]
  status varchar [not null, note: 'Ex: Pendente, Aprovada, Rejeitada, Em Cotação, Pedido Realizado, Entregue, Cancelada']
  justification text [note: 'Justificativa para o pedido']
  approval_rejection_notes text [note: 'Notas do aprovador/rejeitador']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table material_request_items {
  id integer [primary key, increment]
  material_request_id integer [not null]
  material_id integer [not null]
  quantity_requested decimal(10,2) [not null]
  quantity_approved decimal(10,2)
  quantity_delivered decimal(10,2) [note: 'Quantidade efetivamente entregue']
  unit_price_at_request decimal(10,2) [note: 'Preço do material no momento da requisição/cotação']
  notes text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table attachments {
  id integer [primary key, increment]
  file_name varchar [not null]
  file_path varchar [not null, note: 'Caminho no sistema de arquivos ou URL do S3/blob storage']
  mime_type varchar
  file_size_bytes integer
  uploaded_by_user_id integer [not null]
  entity_type varchar [not null, note: 'Ex: project, task, material_request']
  entity_id integer [not null, note: 'ID da entidade à qual o anexo pertence']
  description text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]

  indexes {
    (entity_type, entity_id) // Para buscar anexos de uma entidade específica
  }
}

Table audit_logs {
  id integer [primary key, increment]
  user_id integer [note: 'Usuário que realizou a ação, pode ser null para ações do sistema']
  action_type varchar [not null, note: 'Ex: CREATE, UPDATE, DELETE, LOGIN_SUCCESS, LOGIN_FAIL']
  entity_name varchar [note: 'Nome da tabela/entidade afetada, ex: projects, tasks']
  entity_id integer [note: 'ID da entidade afetada']
  old_values text [note: 'JSON ou formato similar dos valores antigos (para UPDATE/DELETE)']
  new_values text [note: 'JSON ou formato similar dos valores novos (para CREATE/UPDATE)']
  ip_address varchar
  user_agent text
  timestamp timestamp [default: `now()`, not null]
}


// --- Relacionamentos (Foreign Keys) ---

// User Management
Ref: password_reset_tokens.user_id > users.id
Ref: user_roles.user_id > users.id
Ref: user_roles.role_id > roles.id

// Projects
Ref: projects.created_by_user_id > users.id

// Project Members
Ref: project_members.project_id > projects.id
Ref: project_members.user_id > users.id

// Tasks
Ref: tasks.project_id > projects.id
Ref: tasks.assigned_to_user_id > users.id
Ref: tasks.parent_task_id - tasks.id // Self-referencing

// Materials and Stock
Ref: stock_movements.material_id > materials.id
Ref: stock_movements.user_id > users.id
Ref: stock_movements.related_material_request_item_id > material_request_items.id
Ref: stock_movements.related_task_id > tasks.id

// Material Requests
Ref: material_requests.project_id > projects.id
Ref: material_requests.requester_user_id > users.id
Ref: material_requests.approver_user_id > users.id

// Material Request Items
Ref: material_request_items.material_request_id > material_requests.id
Ref: material_request_items.material_id > materials.id

// Attachments (Polymorphic)
Ref: attachments.uploaded_by_user_id > users.id
// O relacionamento polimórfico (entity_type, entity_id) não é diretamente expresso com 'Ref' no DBML
// mas a intenção é que entity_id se refira ao 'id' da tabela indicada em 'entity_type'.

// Audit Logs
Ref: audit_logs.user_id > users.id

// --- Notas Adicionais ---
// RF06 Cadastro de Serviços/Custos:
// - Custo de Material: `material_request_items.quantity_delivered * material_request_items.unit_price_at_request`
// - Custo de Mão de Obra: `tasks.actual_hours_spent * users.hourly_rate` (para o `tasks.assigned_to_user_id`)
// - Composição de serviços mais complexa (ex: "Alvenaria") não está modelada como uma entidade distinta,
//   mas os custos dos seus componentes (tijolo, cimento, mão de obra) podem ser rastreados e agregados.
//   Para uma composição explícita, seriam necessárias tabelas `service_definitions` e `service_definition_items`.

// RF09 Gestão de Orçamento:
// - Orçado: `projects.total_budget`
// - Realizado: Soma dos custos de materiais e mão de obra conforme acima.
// - Alertas de estouro seriam lógica da aplicação.

// RF20 Importação/Exportação: A estrutura de dados suporta isso. A funcionalidade é da aplicação.